// package main

import (
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
)

func main() {

	// Open up our database connection.
	// I've set up a database on my local machine using phpmyadmin.
	// The database is called testDb
	db, err := sql.Open("mysql", "tom:multipass@tcp(127.0.0.1:3306)/")

	// if there is an error opening the connection, handle it
	if err != nil {
		panic(err.Error())
	}

	// defer the close till after the main function has finished
	// executing
	defer db.Close()

	// Creating a new database
	_, err = db.Exec("CREATE DATABASE zeodine")
	if err != nil {
		panic(err)
	}
	fmt.Println("Database created")

	// Using the fleshly created database:
	_, err = db.Exec("USE zeodine")
	if err != nil {
		panic(err)
	}
	// Creating a new table to insert some elements
	_, err = db.Exec("CREATE TABLE zeodine.example ( id integer, data varchar(32) )")
	if err != nil {
		panic(err)
	}
	fmt.Println("Table created")

	// Inserting some random stuff
	ins, err := db.Query("INSERT INTO example VALUES (42,'test')")
	if err != nil {
		fmt.Println(err)
	}
	// Defer is necessary for Query
	defer ins.Close()
	fmt.Println("Values inserted")

	// Query the table
	que, err := db.Query("SELECT * FROM zeodine.example")
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("Table content:")
	for que.Next() {
		var id int
		var name string
		err = que.Scan(&id, &name)
		if err != nil {
			fmt.Println(err)
		}
		fmt.Println(id, name)
	}

	// Dropping database
	_, err = db.Exec("DROP DATABASE zeodine")
	if err != nil {
		panic(err)
	}
	fmt.Println("Database DROPED")

}
